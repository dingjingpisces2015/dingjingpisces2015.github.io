I"	<h1 id="引用计数实现原理">引用计数实现原理</h1>

<p>在iOS中，使用引用计数管理内存，本文会从runtime源码中将引用计数的代码剥离出来，尝试梳理出引用计数retain,release做了什么。</p>

<h2 id="sidetables结构">SideTables结构</h2>

<p><img src="https://raw.githubusercontent.com/dingjingpisces2015/dingjingpisces2015.github.io/master/img/post-sidetable.png" alt="SideTables" /></p>

<h2 id="retain">retain</h2>

<p>跟踪Runtime中NSObject的retain方法实现，可以看到reain方法最后调用了rootRetain(true, true)
总结rootRetain执行流程如下：</p>

<ul>
  <li>如果是TaggedPointer不做任何处理
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (isTaggedPointer()) return (id)this;
</code></pre></div>    </div>
  </li>
  <li>判断是否是指针，如果是指针，直接放入SideTable进行引用计数</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (slowpath(!newisa.nonpointer)) { //如果newisa.nopointer = falae,即isa是个指针
            ClearExclusive(&amp;isa.bits);//这个函数啥都不做，是空的
            if (!tryRetain &amp;&amp; sideTableLocked) sidetable_unlock();//以self为参数，解锁这组sideTable
            if (tryRetain) return sidetable_tryRetain() ? (id)this : nil;
            else return sidetable_retain();//因为isa是个指针，没有额外的retain信息，因此不得不去操作sideTable进行引用计数
        //至此非指针的isa的retain就处理完了
        }

</code></pre></div></div>

<ul>
  <li>
    <p>非指针情况，在isa的extra_RC位进行引用计数加一</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>newisa.bits = addc(newisa.bits, RC_ONE, 0, &amp;carry);  // extra_rc++ 在extra_rc位上+1
</code></pre></div>    </div>

    <ul>
      <li>如果没有溢出，保存新的isa</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>slowpath(!StoreExclusive(&amp;isa.bits, oldisa.bits, newisa.bits))
</code></pre></div>    </div>

    <ul>
      <li>如果溢出了，将extra_rc的一半值存入sideTable，has_sidetable_rc置1</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if (slowpath(carry)) { //如果溢出了
          // newisa.extra_rc++ overflowed
          if (!handleOverflow) { //retain方法调用中传入true
              ClearExclusive(&amp;isa.bits);
              return rootRetain_overflow(tryRetain);
          }
          // Leave half of the retain counts inline and
          // prepare to copy the other half to the side table.
          if (!tryRetain &amp;&amp; !sideTableLocked) sidetable_lock();
          sideTableLocked = true;
          transcribeToSideTable = true;
          newisa.extra_rc = RC_HALF; //extra_rc变成现在的一半
          newisa.has_sidetable_rc = true; //标志需要用sidetable
      }
if (slowpath(transcribeToSideTable)) {
      // Copy the other half of the retain counts to the side table.
      sidetable_addExtraRC_nolock(RC_HALF); //将this的引用计数记录到SideTable中，但只记HALF，话说为啥不全部挪过来？
  }
</code></pre></div>    </div>
  </li>
  <li>
    <p>保存isa直至成功</p>
  </li>
</ul>

<h2 id="release">release</h2>
<p>release最后会调用到rootRelease(true,false)， rootRelease的处理过程大致与rootRetain相反，不过增加了对象销毁逻辑</p>

<p>以下是处理流程</p>
<ul>
  <li>判断是否为TaggedPointer，是则不进行处理</li>
  <li>如果是指针，直接利用sideTable中的值进行引用计数，refCnt—</li>
  <li>如果是非指针， ExtraRC位减一</li>
  <li>如果无溢出，本次操作结束</li>
  <li>如果有溢出，判断是否可以从sideTable借位，如果可以则对应处理，不行就认为对象应该被释放，调用dealloc方法。</li>
</ul>

<h2 id="总结">总结</h2>
<p>苹果对空间的极度利用让人印象深刻，从isa指针与标志位的复用，到利用固定位数进行引用计数，极大程度的避免了申请堆上空间，方式值得借鉴。</p>
:ET